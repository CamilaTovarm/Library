@model BookHive.Models.LoansViewModel

@{
    ViewData["Title"] = "Reservar Libro - BookHive";
}

<div class="main">
    <div class="reserve-card">
        <h2>Reservar libro</h2>

        <div id="message" class="message"></div>

        <form id="reservationForm">
            <label for="UserId">Usuario</label>
            <select id="UserId" name="UserId" required>
                <option value="">Selecciona tu usuario</option>
                @foreach (var user in Model.User)
                {
                    <option value="@user.Value">@user.Text</option>
                }
            </select>

            <label for="BookId">Libro</label>
            <select id="BookId" name="BookId" required>
                <option value="">Selecciona un libro</option>
                @foreach (var book in Model.Book)
                {
                    <option value="@book.Value">@book.Text</option>
                }
            </select>

            <label for="LoanDate">Fecha de reserva</label>
            <input type="date" id="LoanDate" name="LoanDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@Model.LoanDate.ToString("yyyy-MM-dd")" />

            <button type="submit" class="btn-reservar">Reservar libro</button>
        </form>
    </div>
</div>

<style>
    /* Usa tu CSS existente */
</style>

<script>
    document.getElementById('reservationForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const userId = document.getElementById('UserId').value;
        const bookId = document.getElementById('BookId').value;
        const loanDate = document.getElementById('LoanDate').value;
        const messageDiv = document.getElementById('message');

        if (!userId || !bookId || !loanDate) {
            messageDiv.textContent = 'Por favor, completa todos los campos.';
            messageDiv.className = 'message error';
            return;
        }

        try {
            // Obtener datos completos del libro
            const bookResponse = await fetch(`https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Book/${bookId}`);
            if (!bookResponse.ok) throw new Error('Error al obtener datos del libro');
            const bookData = await bookResponse.json();

            if (bookData.loanState === true) {
                messageDiv.textContent = 'El libro ya está reservado, no se puede reservar nuevamente.';
                messageDiv.className = 'message error';
                return;
            }

            // Crear reserva
            const loanUrl = `https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Loans?userId=${encodeURIComponent(userId)}&bookId=${encodeURIComponent(bookId)}&loandDate=${encodeURIComponent(loanDate)}`;
            const loanResponse = await fetch(loanUrl, { method: 'POST' });

            if (!loanResponse.ok) {
                messageDiv.textContent = 'Error al realizar la reserva.';
                messageDiv.className = 'message error';
                return;
            }

            // Actualizar libro para marcarlo como reservado
            const updateBookUrl = `https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Book/Update/${bookId}?title=${encodeURIComponent(bookData.bookTitle)}&isbn=${encodeURIComponent(bookData.isbn)}&publicationDate=${encodeURIComponent(bookData.publicationDate)}&pageCount=${bookData.pageCount}&editorialId=${bookData.editorialId}&countryId=${bookData.countryId}&imgUrl=${encodeURIComponent(bookData.imgUrl)}&authorId=${bookData.authorId}&loanState=true`;

            const updateResponse = await fetch(updateBookUrl, { method: 'PUT' });
            if (!updateResponse.ok) {
                messageDiv.textContent = 'Reserva creada, pero error al actualizar estado del libro.';
                messageDiv.className = 'message error';
                return;
            }

            messageDiv.textContent = '¡Reserva realizada con éxito! Redirigiendo...';
            messageDiv.className = 'message success';
            this.reset();
            setTimeout(() => {
                window.location.href = '/Loans/LoanGet';
            }, 1500);

        } catch (error) {
            messageDiv.textContent = 'Error: ' + error.message;
            messageDiv.className = 'message error';
        }
    });
</script>
