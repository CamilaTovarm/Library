@model BookHive.Models.ReturnsViewModel

@{
    ViewData["Title"] = "Registrar Devolución - BookHive";
}

<div class="main">
    <div class="reserve-card">
        <h2>Registrar devolución</h2>

        <div id="message" class="message"></div>

        <form id="returnForm">
            <label for="LoanId">Reserva</label>
            <select id="LoanId" name="LoanId" required>
                <option value="">Selecciona una reserva</option>
                @foreach (var loan in Model.Loans)
                {
                    <option value="@loan.Value">@loan.Text</option>
                }
            </select>

            <label for="ReturnDate">Fecha de devolución</label>
            <input id="ReturnDate" name="ReturnDate" type="date" required max="@DateTime.Now.ToString("yyyy-MM-dd")" value="@DateTime.Now.ToString("yyyy-MM-dd")" />

            <label for="FineImposed">Multa impuesta</label>
            <input id="FineImposed" name="FineImposed" type="number" step="0.01" min="0" value="0" />

            <button type="submit" class="btn-reservar" id="btnRegistrarDevolucion">Registrar devolución</button>
        </form>
    </div>
</div>

<style>
    /* Mantén tu CSS existente */
    .main {
        text-align: center;
        padding: 70px 20px 40px;
    }

    .reserve-card {
        background: white;
        width: 340px;
        margin: 40px auto;
        padding: 32px 28px;
        border-radius: 18px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.10);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .reserve-card h2 {
            color: #1b5e20;
            margin-bottom: 18px;
            font-size: 2em;
        }

    label {
        display: block;
        color: #4a4a4a;
        font-weight: 500;
        margin-bottom: 6px;
        margin-top: 14px;
        text-align: left;
        width: 100%;
    }

    select, input[type="date"], input[type="number"] {
        width: 100%;
        padding: 8px 10px;
        border: 1px solid #bdbdbd;
        border-radius: 7px;
        font-size: 1em;
        margin-bottom: 10px;
        background: #f9fdf9;
    }

    .btn-reservar {
        background-color: #43a047;
        color: #fff;
        border: none;
        padding: 12px 0;
        width: 100%;
        border-radius: 20px;
        font-size: 1.1em;
        font-weight: bold;
        margin-top: 18px;
        cursor: pointer;
        transition: background 0.2s;
    }

        .btn-reservar:hover:enabled {
            background-color: #388e3c;
        }

        .btn-reservar:disabled {
            background-color: #a5d6a7;
            cursor: not-allowed;
        }

    .message {
        margin-bottom: 15px;
        font-weight: bold;
    }

    .success {
        color: green;
    }

    .error {
        color: red;
    }
</style>

<script>
    document.getElementById('returnForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const btnRegistrar = document.getElementById('btnRegistrarDevolucion');
        const loanId = document.getElementById('LoanId').value;
        const returnDate = document.getElementById('ReturnDate').value;
        const fineImposed = document.getElementById('FineImposed').value || 0;
        const messageDiv = document.getElementById('message');

        if (!loanId || !returnDate) {
            messageDiv.textContent = 'Por favor, completa todos los campos obligatorios.';
            messageDiv.className = 'message error';
            return;
        }

        // Deshabilitar el botón para evitar múltiples envíos
        btnRegistrar.disabled = true;
        btnRegistrar.style.cursor = 'not-allowed';

        try {
            // 1. Crear la devolución
            const returnUrl = `https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Returns?returnDate=${encodeURIComponent(returnDate)}&loanId=${encodeURIComponent(loanId)}&fineImposed=${encodeURIComponent(fineImposed)}`;
            const returnResponse = await fetch(returnUrl, { method: 'POST' });

            if (!returnResponse.ok) {
                messageDiv.textContent = 'Error al registrar la devolución.';
                messageDiv.className = 'message error';
                btnRegistrar.disabled = false;
                btnRegistrar.style.cursor = 'pointer';
                return;
            }

            // 2. Cambiar estado de la reserva a true (liberada) usando DELETE
            const deleteUrl = `https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Loans/Delete/${loanId}`;
            const deleteResponse = await fetch(deleteUrl, { method: 'DELETE' });

            if (!deleteResponse.ok) {
                messageDiv.textContent = 'Devolución registrada, pero error al actualizar el estado de la reserva.';
                messageDiv.className = 'message error';
                btnRegistrar.disabled = false;
                btnRegistrar.style.cursor = 'pointer';
                return;
            }

            // 3. Obtener datos del préstamo para obtener BookId
            const loanResponse = await fetch(`https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Loans/${loanId}`);
            if (!loanResponse.ok) throw new Error('Error al obtener datos del préstamo');
            const loanData = await loanResponse.json();

            // 4. Obtener datos completos del libro
            const bookResponse = await fetch(`https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Book/${loanData.bookId}`);
            if (!bookResponse.ok) throw new Error('Error al obtener datos del libro');
            const bookData = await bookResponse.json();

            // Debug: Mostrar bookData para verificar nombre del campo ID
            console.log('bookData:', bookData);

            // 5. Obtener el ID correcto del libro (idBook o bookId)
            const idLibro = bookData.idBook || bookData.bookId;
            if (!idLibro) throw new Error('El ID del libro no está definido en la respuesta.');

            // 6. Construir URL PUT con todos los datos y loanState = false
            const updateBookUrl = `https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api/Book/Update/${idLibro}` +
                `?title=${encodeURIComponent(bookData.bookTitle)}` +
                `&isbn=${encodeURIComponent(bookData.isbn)}` +
                `&publicationDate=${encodeURIComponent(bookData.publicationDate)}` +
                `&pageCount=${bookData.pageCount}` +
                `&editorialId=${bookData.editorialId}` +
                `&countryId=${bookData.countryId}` +
                `&imgUrl=${encodeURIComponent(bookData.imgUrl)}` +
                `&authorId=${bookData.authorId}` +
                `&loanState=false`;

            const updateResponse = await fetch(updateBookUrl, { method: 'PUT' });

            if (!updateResponse.ok) {
                const errorText = await updateResponse.text();
                messageDiv.textContent = 'Devolución registrada, pero error al actualizar disponibilidad del libro: ' + errorText;
                messageDiv.className = 'message error';
                btnRegistrar.disabled = false;
                btnRegistrar.style.cursor = 'pointer';
                return;
            }

            // Todo correcto
            messageDiv.textContent = 'Devolución registrada, reserva y disponibilidad actualizadas con éxito.';
            messageDiv.className = 'message success';
            this.reset();

            setTimeout(() => {
                window.location.href = '/Returns/ReturnGet'; // Ajusta la ruta según tu proyecto
            }, 1500);

        } catch (error) {
            messageDiv.textContent = 'Error: ' + error.message;
            messageDiv.className = 'message error';
            btnRegistrar.disabled = false;
            btnRegistrar.style.cursor = 'pointer';
        }
    });
</script>




                


