<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <title>Actualizar Libros - BookHive</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(145deg, #e8f5e9, #f1f8f4);
        }

        .container {
            max-width: 1000px;
            margin: 40px auto;
            padding: 20px;
        }

        .book-selector {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .edit-form {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: none;
        }

        select, input, textarea {
            width: 100%;
            padding: 10px;
            margin: 8px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-sizing: border-box;
        }

        button {
            background-color: #43a047;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

            button:hover {
                background-color: #388e3c;
            }

        .message {
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            display: none;
        }

        .success {
            background-color: #dff0d8;
            color: #3c763d;
        }

        .error {
            background-color: #f2dede;
            color: #a94442;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Selector de libro -->
        <div class="book-selector">
            <h2>Seleccionar libro a actualizar</h2>
            <select id="bookSelector">
                <option value="">Seleccione un libro...</option>
            </select>
        </div>

        <!-- Formulario de actualización -->
        <form id="editForm" class="edit-form">
            <h2>Editar Libro</h2>

            <input type="hidden" id="bookId">

            <label>Título:</label>
            <input type="text" id="title" required>

            <label>ISBN:</label>
            <input type="text" id="isbn" required>

            <label>Fecha de publicación:</label>
            <input type="date" id="publicationDate" required>

            <label>Número de páginas:</label>
            <input type="number" id="pageCount" required min="1">

            <label>Editorial:</label>
            <select id="editorialId" required>
                <option value="">Seleccione una editorial...</option>
            </select>

            <label>País:</label>
            <select id="countryId" required>
                <option value="">Seleccione un país...</option>
            </select>

            <label>URL Imagen:</label>
            <input type="url" id="imgUrl">

            <label>Autor:</label>
            <select id="authorId" required>
                <option value="">Seleccione un autor...</option>
            </select>

            <div class="message" id="message"></div>
            <button type="submit">Actualizar Libro</button>
        </form>
    </div>
    <script>
        const apiBase = 'https://bookhive-heaedbaqfgbacdhw.canadacentral-01.azurewebsites.net/api';
        const bookSelector = document.getElementById('bookSelector');
        const editForm = document.getElementById('editForm');
        const message = document.getElementById('message');

        const authorSelect = document.getElementById('authorId');
        const editorialSelect = document.getElementById('editorialId');
        const countrySelect = document.getElementById('countryId');

        // Cargar libros al iniciar
        async function loadBooks() {
            try {
                const response = await fetch(`${apiBase}/Book`);
                const books = await response.json();

                books.forEach(book => {
                    if (!book.state) { // Mostrar solo activos
                        const option = document.createElement('option');
                        option.value = book.bookId;
                        option.textContent = `${book.bookTitle} (ID: ${book.bookId})`;
                        bookSelector.appendChild(option);
                    }
                });
            } catch (error) {
                showMessage(`Error cargando libros: ${error.message}`, 'error');
            }
        }

        // Cargar autores, editoriales y países para selects
        async function loadSelectOptions() {
            try {
                const [authorsRes, editorialsRes, countriesRes] = await Promise.all([
                    fetch(`${apiBase}/Author`),
                    fetch(`${apiBase}/Editorial`),
                    fetch(`${apiBase}/Country`)
                ]);

                const [authors, editorials, countries] = await Promise.all([
                    authorsRes.json(),
                    editorialsRes.json(),
                    countriesRes.json()
                ]);

                fillSelect(authorSelect, authors, 'authorId', 'authorName');
                fillSelect(editorialSelect, editorials, 'editorialId', 'editorialName');
                fillSelect(countrySelect, countries, 'countryId', 'countryName');
            } catch (error) {
                showMessage(`Error cargando listas: ${error.message}`, 'error');
            }
        }

        function fillSelect(selectElement, items, valueProp, textProp) {
            selectElement.innerHTML = `<option value="">Seleccione...</option>`;
            items.forEach(item => {
                if (!item.state) { // Mostrar solo activos si aplica
                    const option = document.createElement('option');
                    option.value = item[valueProp];
                    option.textContent = item[textProp];
                    selectElement.appendChild(option);
                }
            });
        }

        // Manejar selección de libro
        bookSelector.addEventListener('change', async (e) => {
            const bookId = e.target.value;
            if (!bookId) {
                editForm.style.display = 'none';
                return;
            }

            try {
                const response = await fetch(`${apiBase}/Book/${bookId}`);
                const book = await response.json();

                document.getElementById('bookId').value = book.bookId;
                document.getElementById('title').value = book.bookTitle;
                document.getElementById('isbn').value = book.isbn;
                document.getElementById('publicationDate').value = new Date(book.publicationDate).toISOString().split('T')[0];
                document.getElementById('pageCount').value = book.pageCount;
                document.getElementById('imgUrl').value = book.imgUrl || '';

                authorSelect.value = book.authorId;
                editorialSelect.value = book.editorialId;
                countrySelect.value = book.countryId;

                editForm.style.display = 'block';
            } catch (error) {
                showMessage(`Error cargando libro: ${error.message}`, 'error');
            }
        });

        // Manejar envío del formulario
        editForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const bookId = document.getElementById('bookId').value;
            const params = new URLSearchParams({
                title: document.getElementById('title').value,
                isbn: document.getElementById('isbn').value,
                publicationDate: document.getElementById('publicationDate').value,
                pageCount: document.getElementById('pageCount').value,
                editorialId: editorialSelect.value,
                countryId: countrySelect.value,
                imgUrl: document.getElementById('imgUrl').value,
                authorId: authorSelect.value
            });

            try {
                const response = await fetch(`${apiBase}/Book/Update/${bookId}?${params}`, {
                    method: 'PUT'
                });

                if (response.ok) {
                    showMessage('Libro actualizado exitosamente', 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    const errorText = await response.text();
                    showMessage(`Error: ${errorText}`, 'error');
                }
            } catch (error) {
                showMessage(`Error de conexión: ${error.message}`, 'error');
            }
        });

        function showMessage(text, type) {
            message.textContent = text;
            message.className = `message ${type}`;
            message.style.display = 'block';
            setTimeout(() => message.style.display = 'none', 3000);
        }

        // Inicializar
        loadBooks();
        loadSelectOptions();
    </script>
</body>
</html>
